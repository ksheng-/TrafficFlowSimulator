### Example simulator netlist file ############################################

# This is a comment. 
# Statements are delimited by any arbitrary whitespace



### Network definition statements #############################################

# type: declare network type
# usage: type [multiod | singleod]
#   defaults to singleod
type multiod 

# edge: describe the topology in terms of edges
# usage: edge_name start_node end_node [fft=0] [ddt=0]
#   fft (free flow time) and ddt (driver dependent time) kwargs are optional
#       and default to 0
edge src n0   fft=20 ddt=0
edge n0  dest fft=20 ddt=0
edge src 1    fft=20 ddt=0
edge n1  dest fft=0  ddt=0.1

### Route definition statements ###############################################
route S1,P,Q,D1 trip=0 route=0 so=150 
route S1,M,N,D1 trip=0 route=1 so=50
route S2,M,N,D2 trip=1 route=0 so=50
route S2,R,S,D2 trip=1 route=1 so=150


### Analysis statements #######################################################

# trpf: run the simulation over every combination of g, t, p
# usage: trpf g=values t=values p=values [steps=200]
#   g: fraction of agents that change routes per iteration
#   t: number of previous rounds to take into account in the TRPF
#   p: fraction of agents that use the TRPF
#   steps: number of iterations to run the simulation, defaults to 200 
#   Where values is any valid Python expression that returns an iterator over
#       numeric values, ex "[0,1,2]", "range(3)". 
#       The expression should be quoted
trpf g=.2 t=3 p="[0.5, 1]" steps=200

# weights: run the simulation over every specified weight:threshold combination






#######################################
#######  Algorithm parameters #########
#######################################

#w: the weights for the TRPF. Weights are stored in the format t1:v1,t2:v2,...
#   where t1 is a threshold above the System Optimum and v1 is the actual weight.
#   in other words, "30:2" means that if there are more than 30 drivers above the
#   System Optimum for a route, than the drivers on that route could report a
#   congestion level of 2
w = 10:3, 20:5, 50:7


#T: Number of previous rounds to use for calculating the TRPF
#   The TRPF = sum_over_weights(weight*num_agents_reported_that_weight)/num_agents_reporting
#            = sum_over_agents(weight_this_agent_reported)/num_agents_reporting

#######################################
#########  Model parameters ###########
#######################################
#trip_<Trip>: Names of the trips for pretty output.
trip_0 = SD

#num_agents: The total number of agents travelling
num_agents_0 = 200



#routeN: a possible route for agents to use.
#        Note that route numbering starts at 1 and should be consecutive
route_0_0 = S,M,D
route_0_1 = S,N,D

#routeN.opt: the number of agents that should travel along routeN in the
#            System Optimum. Note that this is a function of num_agents
route_opt_0_0 = 100
route_opt_0_1 = 100

