#######################################
#######  Algorithm parameters #########
#######################################

#w: the weights for the TRPF. Weights are stored in the format t1:v1,t2:v2,...
#   where t1 is a threshold above the System Optimum and v1 is the actual weight.
#   in other words, "30:2" means that if there are more than 30 drivers above the 
#   System Optimum for a route, than the drivers on that route could report a
#   congestion level of 2
w = 10:3, 20:5, 50:7

#p: 0<=p<=1 Fraction of agents using the TRPF
#           When an agent is initialized, it will "decide" whether to use the 
#           TRPF by choosing a random number from 0 to 1 and seeing if it's 
#           less than p. If it is, it will use the TRPF. If not, it won't.
#
#           You can specify the range of p values as discrete values or cotinuous values. 
#           For discrete use []: p = [0, 0.5, 1] for values 0, 0.5, 1.
#           For continuous use (): p = (0, 1, 3) for three values linearly spaced between 0 and 1 inclusive, ie. 0, 0.5, 1.
p_values = [0, 0.5, 1]

#T: Number of previous rounds to use for calculating the TRPF
#   The TRPF = sum_over_weights(weight*num_agents_reported_that_weight)/num_agents_reporting
#            = sum_over_agents(weight_this_agent_reported)/num_agents_reporting
#
#           You can specify the range of T values as discrete values.
#           For discrete use []: T = [0, 1, 5] for values 0, 1, 5.
#           For a single value don't use brackets: t_values = 1
t_values = 10

#######################################
#########  Model parameters ###########
#######################################

#trip_<Trip>: Names of the trips for pretty output.
trip_0 = S1T1
trip_1 = S2T2

#num_agents_<Trip>: The total number of agents travelling in a given trip
num_agents_0 = 2100
num_agents_1 = 2100

#G: 0<=G<=1 Fraction of agents who will change routes from one round to the next.
#           Whenever an agent needs to choose a route, it will pick a random 
#           number. If the number is less than G, than it chooses a new route.
#           otherwise, it uses the same route as last time.
#
#           You can specify G values as discrete values or cotinuous values. 
#           For discrete use []: G = [0, 0.5, 1] for values 0, 0.5, 1.
#           For continuous use (): G = (0,1,3) for three values linearly spaced between 0 and 1 inclusive, ie. 0, 0.5, 1.
g_values = (0,1,3)

#route_<Trip>_<Road>: a possible route for agents to use.
route_0_0 = S2,W0,W1,W2,W3,T2
route_0_1 = S2,W0,W1,V1,V2,W2,W3,T2
route_0_2 = S2,V1,V2,W2,W3,T2
route_1_0 = S1,W0,W1,W2,W3,V3,T1
route_1_1 = S1,W0,W1,V1,V2,V3,T1
route_1_2 = S1,W0,W1,V1,V2,W2,W3,V3,T1
route_1_3 = S1,A,W2,W3,V3,T1
route_1_4 = S1,A,W1,V1,V2,V3,T1
route_1_5 = S1,A,W1,V1,V2,W2,W3,V3,T1
route_1_6 = S1,A,W1,W2,W3,V3,T1

#route_opt_<Trip>_<Road>: the number of agents that should travel along routeN in the 
#            System Optimum. Note that this is a function of num_agents
route_opt_0_0 = 2100
route_opt_0_1 = 0
route_opt_0_2 = 0
route_opt_1_0 = 0
route_opt_1_1 = 0
route_opt_1_2 = 0
route_opt_1_3 = 0
route_opt_1_4 = 2100
route_opt_1_5 = 0
route_opt_1_6 = 0

#########################################
#########  Simulation parameters ########
#########################################

num_iterations = 200
