#######################################
#######  Algorithm parameters #########
#######################################

#w: the weights for the TRPF. Weights are stored in the format t1:v1,t2:v2,...
#   where t1 is a threshold above the System Optimum and v1 is the actual weight.
#   in other words, "30:2" means that if there are more than 30 drivers above the 
#   System Optimum for a route, than the drivers on that route could report a
#   congestion level of 2
w = 10:3, 20:5, 50:7

#p: 0<=p<=1 Fraction of agents using the TRPF
#           When an agent is initialized, it will "decide" whether to use the 
#           TRPF by choosing a random number from 0 to 1 and seeing if it's 
#           less than p. If it is, it will use the TRPF. If not, it won't.
p = 0.4

#T: Number of previous rounds to use for calculating the TRPF
#   The TRPF = sum_over_weights(weight*num_agents_reported_that_weight)/num_agents_reporting
#            = sum_over_agents(weight_this_agent_reported)/num_agents_reporting
T = 3

#######################################
#########  Model parameters ###########
#######################################

#num_agents: The total number of agents travelling
num_agents_0 = 600
num_agents_1 = 400
num_agents_2 = 300
num_agents_3 = 400

#G: 0<=G<=1 Fraction of agents who will change routes from one round to the next.
#           Whenever an agent needs to choose a route, it will pick a random 
#           number. If the number is less than G, than it chooses a new route.
#           otherwise, it uses the same route as last time.
G = 0.2

#routeN: a possible route for agents to use.
#        Note that route numbering starts at 1 and should be consecutive
route_0_0 = A,C,G,J,I,L
route_0_1 = A,C,G,J,L
route_0_2 = A,C,F,I,L
route_0_3 = A,C,D,G,J,I,L
route_0_4 = A,C,D,G,J,L
route_0_5 = A,D,G,J,I,L
route_0_6 = A,D,G,J,L
route_0_7 = A,C,G,F,I,L
route_1_0 = A,C,D,H,K,M
route_1_1 = A,C,G,J,K,M
route_1_2 = A,C,G,H,K,M
route_1_3 = A,D,H,K,M
route_1_4 = A,C,G,J,M
route_1_5 = A,C,G,K,M
route_1_6 = A,B,E,H,K,M
route_1_7 = A,C,D,E,H,K,M
route_2_0 = B,D,G,J,I,L
route_2_1 = B,D,G,J,L
route_2_2 = B,A,C,G,J,I,L
route_2_3 = B,A,C,G,J,L
route_2_4 = B,A,C,F,I,L
route_2_5 = B,E,D,G,J,I,L
route_2_6 = B,A,C,D,G,J,I,L
route_2_7 = B,E,D,G,J,L
route_3_0 = B,E,H,K,M
route_3_1 = B,D,H,K,M
route_3_2 = B,D,E,H,K,M
route_3_3 = B,E,D,H,K,M
route_3_4 = B,D,G,J,K,M
route_3_5 = B,D,G,H,K,M
route_3_6 = B,A,C,D,H,K,M
route_3_7 = B,D,G,J,M

#routeN.opt: the number of agents that should travel along routeN in the 
#            System Optimum. Note that this is a function of num_agents
route_0_0_opt = 7.69071
route_0_1_opt = 49.31656
route_0_2_opt = 422.41384
route_0_3_opt = 0
route_0_4_opt = 0
route_0_5_opt = 8.71398
route_0_6_opt = 111.86492
route_0_7_opt = 0
route_1_0_opt = 0
route_1_1_opt = 0
route_1_2_opt = 0
route_1_3_opt = 185.45559
route_1_4_opt = 105.06154
route_1_5_opt = 109.48287
route_1_6_opt = 0
route_1_7_opt = 0
route_2_0_opt = 10.31896
route_2_1_opt = 289.68104
route_2_2_opt = 0
route_2_3_opt = 0
route_2_4_opt = 0
route_2_5_opt = 0
route_2_6_opt = 0
route_2_7_opt = 0
route_3_0_opt = 324.13794
route_3_1_opt = 36.95822
route_3_2_opt = 0
route_3_3_opt = 0
route_3_4_opt = 0
route_3_5_opt = 0
route_3_6_opt = 0
route_3_7_opt = 38.90384

#########################################
#########  Simulation parameters ########
#########################################

num_iterations = 200
